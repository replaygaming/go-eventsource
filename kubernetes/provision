#!/usr/bin/env ruby

require "erb"
require "open3"
require "optparse"
require "highline"

defaults_staging = {
  replicas: 1,
  cpu_request: "100m",
  cpu_limit: "100m",
  memory_request: "16Mi",
  memory_limit: "32Mi",
  affinity_label_key: "soft-dedicated",
  affinity_label_value: "default-namespace",
}

defaults_production = {
  replicas: 6,
  cpu_request: "200m",
  cpu_limit: "300m",
  memory_request: "64Mi",
  memory_limit: "128Mi"
}

options = {
  environment: "staging",
  namespace: "default",
  metrics_provider: "stackdriver",
  no_node_affinity: false,
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: provision [options] TAG"

  opts.on("-e [environment]", "--environment [environment]", String, "Environment to provision. Defaults to '#{options[:environment]}'") do |env|
    options[:environment] = env
  end

  opts.on("-m [metrics_provider]", "--metrics-provider [metrics_provider]", String, "Metrics provider to use. Defaults to '#{options[:metrics_provider]}'") do |metrics|
    options[:metrics_provider] = metrics
  end

  opts.on("-n [namespace]", "--namespace [namespace]", String, "Namespace to deploy. Not valid for production. Defaults to '#{options[:namespace]}'") do |namespace|
    options[:namespace] = namespace
  end

  opts.on("--metrics-topic [metrics_topic]", String, "Metrics topic name to use. Defaults to sane defaults depending on environment") do |metrics_topic|
    options[:metrics_topic] = metrics_topic
  end

  opts.on("-t [topic_name]", "--topic_name [topic_name]", String, "Topic name to use. Defaults to sane defaults depending on environment") do |topic_name|
    options[:topic_name] = topic_name
  end

  opts.on("--no-metrics", "Disable metrics provider. Defaults to '#{options[:metrics_provider]}'") do
    options[:metrics_provider] = nil
  end

  opts.on("-s", "--skip-context-check", "Do not check kubectl context. This is intended to be used only by scripts.") do
    options[:skip_context_check] = true
  end

  opts.on("--no-node-affinity", "Do not set node affinity. Enabled by default for non-production pods running on the default namespace.") do
    options[:no_node_affinity] = true
  end

  opts.on("-d", "--dry-run", "Don't actually change anything, just print out generated deployment/service") do
    options[:dry_run] = true
  end
end
parser.parse!

class Provision
  def initialize(options, defaults_staging, defaults_production, tag)
    @options = options
    @defaults_staging = defaults_staging
    @defaults_production = defaults_production
    @tag = tag
  end

  def call
    ensure_secret
    ensure_pdb if environment == 'production'
    ensure_deployment
    ensure_service
    if @options[:dry_run]
      puts
      puts "Nothing changed since dry run mode was used"
    else
      puts "EventSource provisioned successfully for environment '#{environment}' and namespace '#{namespace}'."
    end
  end

  def ensure_secret
    return if Kernel.system(*%W[kubectl get secret/pubsub -n #{namespace} -o name], err: :out, out: "/dev/null")

    abort "PubSub secrets are not configured. Make sure you have them provisioned from the infrastructure repository."
  end

  def ensure_pdb
    apply_file "pdb", "yaml"
  end

  def ensure_deployment
    apply_file "deployment", "yaml.erb"
  end

  def ensure_service
    apply_file "service", "yaml.erb"
  end

  def apply_file(filename, extension)
    file = File.join(File.expand_path("..", __FILE__), "#{filename}.#{extension}")
    case extension
      when "yaml", "yml"
        resource = File.read(file)
      when "yaml.erb", "yml.erb"
        resource = ERB.new(File.read(file)).result(binding)
      else
        abort("Unsupported file extension '#{extension}'.")
    end
    if @options[:dry_run]
      puts
      puts resource
      return
    end
    kube_apply(resource) || abort("Error applying file '#{filename}.#{extension}'.")
  end

  def kube_apply(resource)
    Open3.popen2e("kubectl apply -n #{namespace} --record=true -f -") do |stdin, out_err, wait_thr|
      stdin.write resource
      stdin.close
      output = out_err.read
      if wait_thr.value.success?
        true
      else
        puts output
        false
      end
    end
  end

  def environment
    @options[:environment]
  end

  def namespace
    @options[:namespace]
  end

  def no_node_affinity
    @options[:no_node_affinity]
  end

  def affinity_label_key
    if !no_node_affinity && namespace == 'default'
      @defaults_staging[:affinity_label_key]
    end
  end

  def affinity_label_value
    if !no_node_affinity && namespace == 'default'
      @defaults_staging[:affinity_label_value]
    end
  end

  def metrics_provider
    @options[:metrics_provider]
  end

  def metrics_prefix
    case environment
    when "staging"
      if namespace == 'default'
        "staging"
      else
        "#{namespace}"
      end
    when "production"
      "production"
    else
      abort("Don't know what metrics prefix to use for this environment.")
    end
  end

  def tag
    @tag
  end

  def replicas
    case environment
    when "staging"
      @defaults_staging[:replicas]
    when "production"
      @defaults_production[:replicas]
    else
      abort("Invalid environment '#{environment}'.")
    end
  end

  def cpu_request
    case environment
    when "staging"
      @defaults_staging[:cpu_request]
    when "production"
      @defaults_production[:cpu_request]
    else
      abort("Invalid environment '#{environment}'.")
    end
  end

  def cpu_limit
    case environment
    when "staging"
      @defaults_staging[:cpu_limit]
    when "production"
      @defaults_production[:cpu_limit]
    else
      abort("Invalid environment '#{environment}'.")
    end
  end

  def memory_request
    case environment
    when "staging"
      @defaults_staging[:memory_request]
    when "production"
      @defaults_production[:memory_request]
    else
      abort("Invalid environment '#{environment}'.")
    end
  end

  def memory_limit
    case environment
    when "staging"
      @defaults_staging[:memory_limit]
    when "production"
      @defaults_production[:memory_limit]
    else
      abort("Invalid environment '#{environment}'.")
    end
  end

  def topic_name
    return @options[:topic_name] if @options[:topic_name]

    case environment
    when "staging"
      if namespace == 'default'
        "eventsource-staging"
      else
        "eventsource-#{namespace}"
      end
    when "production"
      "eventsource"
    else
      abort("Don't know what topic name to use for this environment. Please provide one. See --help for more information")
    end
  end

  def metrics_topic
    return @options[:metrics_topic] if @options[:metrics_topic]

    case environment
    when "staging"
      if namespace == 'default'
        "metrics-staging"
      else
        "metrics-#{namespace}"
      end
    when "production"
      "metrics"
    else
      abort("Don't know what metric topics to use for this environment. Please provide one. See --help for more information")
    end
  end
end

tag = ARGV[0]

abort("Please set the docker image tag to deploy.\n#{parser.help}") if tag.nil? || tag == ""

abort("Production resources must be provisioned on the 'default' namespace.") if options[:environment] == 'production' && options[:namespace] != 'default'

if !options[:skip_context_check]
  kubectl_context = %x(kubectl config current-context).chomp
  abort('Okay, bye!') unless HighLine.new.agree("You are going to run this command for the environment '#{options[:environment]}' and namespace '#{options[:namespace]}'.\nYour current kubectl context is: #{kubectl_context}.\nDo you want to proceed? [y/N]")
end

Provision.new(options, defaults_staging, defaults_production, tag).call
